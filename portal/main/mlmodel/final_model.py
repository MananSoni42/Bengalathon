# -*- coding: utf-8 -*-
"""bng.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PuSTNTGm-KBCTXQXIWosmYObaAXvhxCg
"""

#from google.colab import files
#uploaded = files.upload()

#!ls

import pandas as pd
import lightgbm as lgb
import numpy as np
import sklearn
import json
#from pprint import pprint
#from sklearn.ensemble import RandomForestClassifier
#from sklearn.svm import SVC
#from sklearn.neighbors import KNeighborsClassifier
from sklearn.neural_network import MLPClassifier
#from sklearn.preprocessing import StandardScaler

train_X = pd.read_csv('train.csv', index_col='ID')
train_Y = train_X['CLAIM_FLAG']
train_X = train_X.drop(['CLAIM_FLAG'],axis=1)

valid_X = pd.read_csv('valid.csv', index_col='ID')
valid_Y = valid_X['CLAIM_FLAG']
valid_X = valid_X.drop(['CLAIM_FLAG'],axis=1)

test_X = pd.read_csv('test.csv', index_col='ID')
test_Y = test_X['CLAIM_FLAG']
test_X = test_X.drop(['CLAIM_FLAG'],axis=1)

cols_to_keep_cont = ['binned_AGE', 'binned_INCOME', 'binned_HOME_VAL', 'binned_OLD_CLAIM', 'binned_CLM_FREQ', 'binned_CLM_AMT', 'binned_CAR_AGE', 'KIDSDRIV', 'PARENT1', 'TRAVTIME', 'BLUE_BOOK']
cols_to_keep_cat  = ['PARENT1', 'MSTATUS', 'GENDER', 'CAR_USE', 'RED_CAR', 'REVOKED', 'URBAN_CITY', 'EDUCATION_<High School', 'EDUCATION_Bachelors', 'EDUCATION_Masters', 'EDUCATION_PhD', 
                     'EDUCATION_z_High School', 'CAR_TYPE_Minivan', 'CAR_TYPE_Panel Truck', 'CAR_TYPE_Pickup', 'CAR_TYPE_Sports Car', 'CAR_TYPE_Van', 'CAR_TYPE_z_SUV', 'OCCUPATION_Clerical',
                     'OCCUPATION_Doctor', 'OCCUPATION_Home Maker', 'OCCUPATION_Lawyer', 'OCCUPATION_Manager', 'OCCUPATION_Professional', 'OCCUPATION_Student', 'OCCUPATION_z_Blue Collar' ]
cols_to_keep = cols_to_keep_cont+cols_to_keep_cat
print(train_X[cols_to_keep_cont + cols_to_keep_cat].columns)

model = MLPClassifier(hidden_layer_sizes = (512,128,32), activation = 'relu', learning_rate_init = 0.001, alpha = 0.03, max_iter = 5000)

#train the model
model.fit(train_X,train_Y)

#get predictions
Y_pred = model.predict(valid_X)

#calulate accuracy
acc = sklearn.metrics.accuracy_score(np.array(Y_pred), np.array(valid_Y))
f = sklearn.metrics.f1_score(np.array(valid_Y),np.array(Y_pred))  
print('valid_acc: ',acc)
print('f-score:', f)

#get predictions
Y_pred = model.predict(test_X)

#calulate accuracy
acc = sklearn.metrics.accuracy_score(np.array(Y_pred), np.array(test_Y))
f = sklearn.metrics.f1_score(np.array(test_Y),np.array(Y_pred))  
print('test_acc: ',acc)
print('f-score:', f)

